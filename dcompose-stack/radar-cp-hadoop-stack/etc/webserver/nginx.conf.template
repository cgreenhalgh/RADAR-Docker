worker_rlimit_nofile 8192;

events {
  worker_connections  4096;  ## Default: 1024
}

http {
  default_type application/octet-stream;
  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  tcp_nodelay  on;

  # hide nginx version
  server_tokens off;

  # add nosniff header (https://www.owasp.org/index.php/List_of_useful_HTTP_headers)
  add_header X-Content-Type-Options nosniff;

  # For logins, make 2 requests per second at most
  limit_req_zone $binary_remote_addr zone=login_limit:10m rate=2r/s;

  server {
    listen                    80 default_server;
    listen                    [::]:80 default_server;
    server_name               localhost;
    location / {
      return                    301 https://$server_name$request_uri;
    }
    location ^~ /.well-known {
      allow all;
      root  /data/letsencrypt/;
    }
  }

  server { # simple reverse-proxy
    listen                    443 ssl http2 default_server;
    listen                    [::]:443 ssl http2 default_server;
    server_name               localhost;

    ssl                       on;

    add_header                Strict-Transport-Security "max-age=31536000" always;

    ssl_session_cache         shared:SSL:20m;
    ssl_session_timeout       10m;

    ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers               "ECDH+AESGCM:ECDH+AES256:ECDH+AES128:!ADH:!AECDH:!MD5;";

    ssl_stapling              on;
    ssl_stapling_verify       on;
    #resolver                  8.8.8.8 8.8.4.4;

    ssl_certificate           /etc/letsencrypt/live/localhost/fullchain.pem;
    ssl_certificate_key       /etc/letsencrypt/live/localhost/privkey.pem;
    ssl_trusted_certificate   /etc/letsencrypt/live/localhost/chain.pem;

    access_log                /var/log/nginx/access.log;
    error_log                 /var/log/nginx/error.log;

    # this is the internal Docker DNS, cache only for 30s
    resolver 127.0.0.11 valid=30s;

    location /kafka/ {
      include cors.conf;
      set $gateway       http://gateway;
      rewrite ^/kafka(.*)$ /radar-gateway$1 break;
      proxy_pass         $gateway;
      proxy_set_header   Host $host;
      proxy_http_version 1.1;
      proxy_set_header   Connection "";
    }
    location ^~ /kafka/consumers {
      deny all;
    }
    location ^~ /kafka/brokers {
      deny all;
    }
    location ~* /kafka/topics/.+/partitions {
      deny all;
    }
    location /schema/ {
      limit_except GET {
        deny all;
      }
      set $schemaregistry http://schema-registry-1:8081;
      rewrite ^/schema(.*)$ $1 break;
      proxy_pass         $schemaregistry;
      proxy_set_header   Host $host;
      proxy_http_version 1.1;
      proxy_set_header   Connection "";
    }
    location /dashboard/ {
      set $dashboard     http://dashboard:80;
      rewrite ^/dashboard(.*)$ $1 break;
      proxy_pass         $dashboard;
      proxy_set_header   Host $host;
    }
    location /portainer/ {
      include ip-access-control.conf;

      set $portainer     http://portainer:9000;
      rewrite ^/portainer(.*)$ $1 break;
      proxy_pass         $portainer;
      proxy_http_version 1.1;
      proxy_set_header   Connection "";
    }
    location /portainer/api/websocket/ {
      include ip-access-control.conf;
      rewrite ^/portainer(.*)$ $1 break;
      proxy_pass         $portainer;
      proxy_set_header   Upgrade $http_upgrade;
      proxy_set_header   Connection "upgrade";
      proxy_http_version 1.1;
    }
    location /api/ {
      include cors.conf;
      set $restapi       http://rest-api:8080;
      # NB keep /api/
      proxy_pass         $restapi;
      proxy_set_header   Host $host;
    }
    location /managementportal/ {
      include cors.conf;
      set $managementportal http://managementportal-app:8080;
      # keep /managementportal
      proxy_pass         $managementportal;
      proxy_set_header   Host $host;
    }
    location /managementportal/oauth/ {
      # Allow 20 fast-following requests, like when authorizing a user.
      limit_req zone=login_limit burst=20;
      include cors.conf;
      # keep /managementportal/...
      proxy_pass         ${managementportal};
      proxy_set_header   Host $host;
    }
    location /managementportal/api/meta-token/ {
      limit_req zone=login_limit;
      include cors.conf;
      # keep /managementportal/...
      proxy_pass         ${managementportal};
      proxy_set_header   Host $host;
    }
    location /kafkamanager/{
      include ip-access-control.conf;
      auth_basic         "Kafka manager";
      auth_basic_user_file kafka-manager.htpasswd;

      set $kafkamanager  http://kafka-manager:9000;
      # keep /kafkamanager
      proxy_pass         $kafkamanager;
      proxy_set_header   Host $host;
    }
    include optional-services.conf;
  }
}
